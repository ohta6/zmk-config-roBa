#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// OS設定を日本語キーボードのまま使用するための変換定義
#define JP_DQUOTE       AT                // "
#define JP_AMPERSAND    CARET             // &
#define JP_QUOTE        AMPERSAND         // '
#define JP_EQUAL        UNDER             // =
#define JP_CARET        EQUAL             // ^
#define JP_YEN          0x89              // ¥
#define JP_PLUS         COLON             // +
#define JP_TILDE        PLUS              // ~
#define JP_PIPE         LS(0x89)          // |
#define JP_AT           LEFT_BRACKET      // @
#define JP_COLON        SINGLE_QUOTE      // :
#define JP_ASTERISK     DOUBLE_QUOTES     // *
#define JP_BACKQUOTE    LEFT_BRACE        // `
#define JP_UNDERSCORE   LS(0x87)          // _
#define JP_LBRACKET     RIGHT_BRACKET     // [
#define JP_RBRACKET     BACKSLASH         // ]
#define JP_LPAREN       ASTERISK          // (
#define JP_RPAREN       LEFT_PARENTHESIS  // )
#define JP_LBRACE       RIGHT_BRACE       // {
#define JP_RBRACE       PIPE              // }
#define JP_KANA         LANGUAGE_1        // かな
#define JP_EISU         LANGUAGE_2        // 英数
#define JP_HANZEN       GRAVE             // 半角/全角

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    // レイヤーの順番とかをいじったので整合するかどうか見直す
    //automouse-layer = <4>;

    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
        alt_tab_sticky: alt_tab_sticky {
            compatible = "zmk,behavior-macro";
            label = "ALT_TAB_STICKY";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LALT>
                , <&macro_tap &kp TAB>
                , <&macro_wait_time 2000>
                , <&macro_release &kp LALT>
                ;
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q      &kp W         &kp E         &kp R                 &kp T                                                    &kp Y             &kp U    &kp I     &kp O     &kp P
&kp A      &kp S         &kp D         &kp F                 &kp G      &kp LG(LC(LA(LEFT_ARROW)))           &kp LG(LC(LA(RIGHT_ARROW)))          &kp H             &kp J    &kp K     &kp L     &kp MINUS
&kp Z      &kp X         &kp C         &kp V                 &kp B      &kp LG(LC(LEFT_ARROW))          &kp LG(LC(RIGHT_ARROW))       &kp N             &lt 5 M  &mkp MB1  &mkp MB3  &mkp MB2
&kp LS(LG(S))  &kp LEFT_WIN  &kp LEFT_ALT  &mt LCTRL JP_EISU  &lt 1 TAB  &mt LEFT_SHIFT SPACE      &mt LEFT_ALT ENTER  &lt 2 JP_KANA                               &kp ESCAPE
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        SYMBOL {
            bindings = <
&kp EXCLAMATION  &kp JP_AT   &kp HASH      &kp DOLLAR    &kp PERCENT                                   &kp JP_CARET          &kp JP_AMPERSAND  &kp JP_LPAREN  &kp JP_RPAREN  &kp JP_TILDE
&bt BT_SEL 0     &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bootloader      &trans         &kp JP_DQUOTE      &kp JP_QUOTE        &kp JP_LBRACE        &kp JP_RBRACE        &kp JP_UNDERSCORE
&trans           &trans        &trans        &trans        &trans        &bt BT_CLR       &trans         &kp SEMICOLON      &kp JP_COLON      &kp LT                &kp GT                 &kp QMARK
&trans           &trans        &trans        &trans        &trans        &trans           &kp BACKSPACE  &trans                                                                         &kp EXCLAMATION
            >;
        };

        NUM {
            bindings = <
&kp MINUS       &kp N1  &kp N2  &kp N3  &kp JP_PLUS                                              &kp JP_YEN   &kp JP_PIPE        &kp JP_LBRACKET  &kp JP_RBRACKET  &kp JP_BACKQUOTE
&kp SLASH       &kp N4  &kp N5  &kp N6  &kp JP_ASTERISK     &kp LC(LA(KP_NUMBER_0))      &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW      &kp RIGHT_ARROW    &kp JP_EQUAL
&kp LEFT_SHIFT  &kp N7  &kp N8  &kp N9  &kp N0  &kp JP_EQUAL                    &trans  &kp JP_PLUS        &kp JP_ASTERISK    &kp COMMA         &kp DOT            &kp SLASH
&trans          &trans           &trans           &trans           &trans           &trans                       &trans  &trans                                                               &kp ESCAPE
            >;
        };

        FUNCTION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                       &kp F1  &kp F2  &kp F3  &kp F4  &kp F5
&trans  &trans  &trans  &trans  &trans  &trans      &kp F13  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans  &trans  &trans  &trans  &kp F11
&trans  &trans  &trans  &trans  &trans  &trans      &trans   &trans                          &kp F12
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &trans  &trans  &trans  &trans  &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                          &trans
            >;

            //sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        // ゲームレイヤーにする

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };
    };
};
